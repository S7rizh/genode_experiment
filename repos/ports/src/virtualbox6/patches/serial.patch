Patch for serial raw-file backend to really kick the consumer of the FIFO to
consume the (mostly one-byte) content by waiting for an acknowledgement. This
prevents guests that poll the UART LSR.THRE before writing the next character
into the FIFO from redundant exits due to a not processing UART state machine.
The original implementation alleviates this behavior wih RTYield() on LSR read.

--- a/src/virtualbox6/src/VBox/Devices/Serial/DrvRawFile.cpp
+++ b/src/virtualbox6/src/VBox/Devices/Serial/DrvRawFile.cpp
@@ -58,6 +58,7 @@
     RTFILE              hOutputFile;
     /** Event semaphore for the poll interface. */
     RTSEMEVENT          hSemEvtPoll;
+    RTSEMEVENT          hSemEvtPollAck;
 } DRVRAWFILE, *PDRVRAWFILE;
 
 
@@ -78,7 +79,9 @@
         return VINF_SUCCESS;
     }
 
-    return RTSemEventWait(pThis->hSemEvtPoll, cMillies);
+    int rc = RTSemEventWait(pThis->hSemEvtPoll, cMillies);
+    RTSemEventSignal(pThis->hSemEvtPollAck);
+    return rc;
 }
 
 
@@ -86,7 +89,9 @@
 static DECLCALLBACK(int) drvRawFilePollInterrupt(PPDMISTREAM pInterface)
 {
     PDRVRAWFILE pThis = RT_FROM_MEMBER(pInterface, DRVRAWFILE, IStream);
-    return RTSemEventSignal(pThis->hSemEvtPoll);
+    int rc =  RTSemEventSignal(pThis->hSemEvtPoll);
+    RTSemEventWait(pThis->hSemEvtPollAck, RT_INDEFINITE_WAIT);
+    return rc;
 }
 
 
@@ -177,6 +182,12 @@
         RTSemEventDestroy(pThis->hSemEvtPoll);
         pThis->hSemEvtPoll = NIL_RTSEMEVENT;
     }
+
+    if (pThis->hSemEvtPollAck != NIL_RTSEMEVENT)
+    {
+        RTSemEventDestroy(pThis->hSemEvtPollAck);
+        pThis->hSemEvtPollAck = NIL_RTSEMEVENT;
+    }
 }
 
 
@@ -217,6 +228,8 @@
 
      rc = RTSemEventCreate(&pThis->hSemEvtPoll);
      AssertRCReturn(rc, rc);
+     rc = RTSemEventCreate(&pThis->hSemEvtPollAck);
+     AssertRCReturn(rc, rc);
 
     /*
      * Open the raw file.
