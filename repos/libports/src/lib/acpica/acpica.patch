diff --git src/lib/acpica/source/components/events/evevent.c src/lib/acpica/source/components/events/evevent.c
index cec39cb..2a8e3a6 100644
--- src/lib/acpica/source/components/events/evevent.c
+++ src/lib/acpica/source/components/events/evevent.c
@@ -188,6 +188,9 @@ AcpiEvFixedEventInitialize (
     UINT32                  i;
     ACPI_STATUS             Status;
 
+    /* read enabled events by kernel and don't disable them */
+    UINT32 FixedEnable;
+    (void) AcpiHwRegisterRead (ACPI_REGISTER_PM1_ENABLE, &FixedEnable);
 
     /*
      * Initialize the structure that keeps track of fixed event handlers and
@@ -198,6 +201,12 @@ AcpiEvFixedEventInitialize (
         AcpiGbl_FixedEventHandlers[i].Handler = NULL;
         AcpiGbl_FixedEventHandlers[i].Context = NULL;
 
+        if (FixedEnable & AcpiGbl_FixedEventInfo[i].EnableBitMask)
+        {
+            AcpiOsPrintf ("	Genode: SKIP disabling event '%u'(%x) - enabled by kernel!\n", i, AcpiGbl_FixedEventInfo[i].EnableBitMask);
+            continue;
+        }
+
         /* Disable the fixed event */
 
         if (AcpiGbl_FixedEventInfo[i].EnableRegisterId != 0xFF)
@@ -262,10 +271,13 @@ AcpiEvFixedEventDetect (
      */
     for (i = 0; i < ACPI_NUM_FIXED_EVENTS; i++)
     {
-        /* Both the status and enable bits must be on for this event */
-
-        if ((FixedStatus & AcpiGbl_FixedEventInfo[i].StatusBitMask) &&
-            (FixedEnable & AcpiGbl_FixedEventInfo[i].EnableBitMask))
+        /* kernel 'signals' the fixed event by disabling it in the enable
+         * register. Check for events, that have registered handlers and that
+         * are disabled in the enable register. If found, re-enable event.
+         */
+        if (AcpiGbl_FixedEventInfo[i].EnableBitMask &&
+            AcpiGbl_FixedEventHandlers[i].Handler &&
+            !(FixedEnable & AcpiGbl_FixedEventInfo[i].EnableBitMask))
         {
             /*
              * Found an active (signalled) event. Invoke global event
@@ -309,11 +321,10 @@ AcpiEvFixedEventDispatch (
     ACPI_FUNCTION_ENTRY ();
 
 
-    /* Clear the status bit */
-
+    /* Re-enable event - kernel disabled it */
     (void) AcpiWriteBitRegister (
-        AcpiGbl_FixedEventInfo[Event].StatusRegisterId,
-        ACPI_CLEAR_STATUS);
+        AcpiGbl_FixedEventInfo[Event].EnableRegisterId,
+        ACPI_ENABLE_EVENT);
 
     /*
      * Make sure that a handler exists. If not, report an error
diff --git src/lib/acpica/source/include/acpixf.h src/lib/acpica/source/include/acpixf.h
index 3a823a3..abc2900 100644
--- src/lib/acpica/source/include/acpixf.h
+++ src/lib/acpica/source/include/acpixf.h
@@ -137,7 +137,7 @@
  * 5) Allow unresolved references (invalid target name) in package objects
  * 6) Enable warning messages for behavior that is not ACPI spec compliant
  */
-ACPI_INIT_GLOBAL (UINT8,            AcpiGbl_EnableInterpreterSlack, FALSE);
+ACPI_INIT_GLOBAL (UINT8,            AcpiGbl_EnableInterpreterSlack, TRUE);
 
 /*
  * Automatically serialize all methods that create named objects? Default
diff --git src/lib/acpica/source/include/platform/acenv.h src/lib/acpica/source/include/platform/acenv.h
index 1ab311d..514b144 100644
--- src/lib/acpica/source/include/platform/acenv.h
+++ src/lib/acpica/source/include/platform/acenv.h
@@ -239,7 +239,15 @@
 
 /* Unknown environment */
 
-#error Unknown target environment
+#ifdef __x86_64__
+#define ACPI_MACHINE_WIDTH 64
+#else
+#define ACPI_MACHINE_WIDTH 32
+#define ACPI_USE_NATIVE_DIVIDE
+#endif
+
+/* required for va_arg - otherwise below some alternative is defined */
+#include <stdarg.h>
 #endif
 
 /*! [End] no source code translation !*/
diff --git src/lib/acpica/source/include/platform/acgcc.h src/lib/acpica/source/include/platform/acgcc.h
index 584d50f..c1224fb 100644
--- src/lib/acpica/source/include/platform/acgcc.h
+++ src/lib/acpica/source/include/platform/acgcc.h
@@ -60,7 +60,9 @@ typedef __builtin_va_list       va_list;
 #endif
 #endif
 
+#ifndef ACPI_INLINE
 #define ACPI_INLINE             __inline__
+#endif
 
 /* Function name is used for debug output. Non-ANSI, compiler-dependent */
 
diff --git src/lib/acpica/source/components/utilities/utclib.c b/acpica-5c1c548586f9a754f192a04b7931acabeb4c7239.memset_fix/src/lib/acpica/source/components/utilities/utclib.c
index 25c20fa..00b44d5 100644
--- src/lib/acpica/source/components/utilities/utclib.c
+++ src/lib/acpica/source/components/utilities/utclib.c
@@ -232,6 +232,11 @@
  *
  ******************************************************************************/
 
+/*
+ * The compiler attribute is required to prevent the generation of a 'memset()'
+ * call in the 'while' loop with gcc 10.
+ */
+__attribute((optimize("no-tree-loop-distribute-patterns")))
 void *
 memset (
     void                    *Dest,
